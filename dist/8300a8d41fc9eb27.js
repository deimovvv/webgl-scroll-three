import*as THREE from"three";import"./style.css";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";import fragment from"./shaders/fragment.glsl";import vertex from"./shaders/vertex.glsl";import gsap from"gsap";import dat from"dat-gui";export default class Sketch{constructor(e){this.scene=new THREE.Scene,this.container=e.domElement,this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=THREE.sRGBEncoding,this.renderer.setPixelRatio(Math.min(devicePixelRatio),2),this.container.appendChild(this.renderer.domElement),this.camera=new THREE.PerspectiveCamera(70,this.width/this.height,.01,10),this.camera.position.z=1,this.controls=new OrbitControls(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.time=0,this.resize(),this.addObjects(),this.render(),this.setupResize(),this.materials=[],this.meshes=[],this.groups=[],this.handleImages()}handleImages(){[...document.querySelectorAll("img")].forEach(((e,t)=>{let s=this.material.clone();this.materials.push(s);let i=new THREE.Group;s.uniforms.uTexture.value=new THREE.Texture(e),s.uniforms.uTexture.value.needsUpdate=!0;let r=new THREE.PlaneBufferGeometry(.85,.8,20,20),o=new THREE.Mesh(r,s);i.add(o),this.groups.push(i),this.scene.add(i),this.meshes.push(o),i.position.y+=.09*t,i.position.x=.25,i.position.z=-.25,i.rotation.y=-.45}))}resize(){this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix()}setupResize(){window.addEventListener("resize",this.resize.bind(this))}addObjects(){this.geometry=new THREE.PlaneBufferGeometry(1,1,100,100),console.log(this.geometry),this.material=new THREE.ShaderMaterial({transparent:!0,uniforms:{time:{value:1},uTexture:{value:null},distanceFromCenter:{value:0},resolution:{value:new THREE.Vector2}},vertexShader:vertex,fragmentShader:fragment,side:THREE.DoubleSide}),this.plane=new THREE.Mesh(this.geometry,this.material)}addlights(){const e=new THREE.AmbientLight(16777215,1);this.scene.add(e);const t=new THREE.DirectionalLight(16777215,2);this.scene.add(t)}render(){this.time+=.05,this.materials&&this.materials.forEach((e=>{e.uniforms.time.value=this.time})),this.material.uniforms.time.value=this.time,requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera)}}let sketch=new Sketch({domElement:document.getElementById("container")}),attractMode=!1,attractTo=0,speed=0,position=0,rounded=0,block=document.getElementById("block"),wrap=document.getElementById("wrap"),elems=[...document.querySelectorAll(".n")];window.addEventListener("wheel",(e=>{speed+=3e-4*e.deltaY}));let objs=Array(4).fill({dist:0});function raf(){position+=speed,speed*=.8,objs.forEach(((e,t)=>{e.dist=Math.min(Math.abs(position-t),1),e.dist=1-e.dist**2,elems[t].style.transform=`scale(${1+.4*e.dist})`;let s=1+.5*e.dist;sketch.meshes[t].position.y=1.2*t-1.2*position,sketch.meshes[t].scale.set(s,s,s),sketch.meshes[t].material.uniforms.distanceFromCenter.value=e.dist})),rounded=Math.round(position);let e=rounded-position;attractMode?position+=.03*-(position-attractTo):(position+=Math.sign(e)*Math.pow(Math.abs(e),.7)*.015,wrap.style.transform=`translate(0,${100*-position+50}px)`),window.requestAnimationFrame(raf)}raf();let navs=[...document.querySelectorAll("li")],nav=document.querySelector(".nav"),rots=sketch.groups.map((e=>e.rotation));console.log(rots),nav.addEventListener("mouseenter",(()=>{attractMode=!0,gsap.to(rots,{duration:.3,x:0,y:0,z:0})})),nav.addEventListener("mouseleave",(()=>{attractMode=!1,gsap.to(rots,{duration:.3,x:0,y:-.45,z:0})})),navs.forEach((e=>{e.addEventListener("mouseover",(e=>{attractTo=Number(e.target.getAttribute("data-nav")),console.log(attractTo)}))}));